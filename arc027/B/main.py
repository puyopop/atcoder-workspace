#!/usr/bin/env python3
import sys


def solve(N: int, s: "List[str]"):
    uf = UnionFind(2*N)
    # 同じ桁なら同じ数字
    for i in range(N):
        uf.union(i, i+N)
    # 同じ文字なら同じ数字
    d = {}
    for i, ss in enumerate(s):
        for j, c in enumerate(ss):
            if c.isdigit():
                continue
            if c in d:
                uf.union(d[c], i*N+j)
            else:
                d[c] = i * N + j
    ans = 1
    for root in uf.roots():
        if any(s[member//N][member%N].isdigit() for member in uf.members(root)):
            continue
        # 先頭を含むなら1-9の9通り、含まないなら10通り
        if any(member%N==0 for member in uf.members(root)):
            ans *= 9
        else:
            ans *= 10
    return ans

# https://note.nkmk.me/python-union-find/
class UnionFind():
    def __init__(self, n):
        self.n = n
        self.parents = [-1] * n
        
    def find(self, x):
        if self.parents[x] < 0:
            return x
        else:
            self.parents[x] = self.find(self.parents[x])
            return self.parents[x]
    
    def union(self, x, y):
        x = self.find(x)
        y = self.find(y)
        
        if x == y:
            return
        
        if self.parents[x] > self.parents[y]:
            x, y = y, x
        
        self.parents[x] += self.parents[y]
        self.parents[y] = x
    
    def size(self, x):
        return -self.parents[self.find(x)]
        
    def same(self, x, y):
        return self.find(x) == self.find(y)
    
    def members(self, x):
        root = self.find(x)
        return [i for i in range(self.n) if self.find(i) == root]
    
    def roots(self):
        return [i for i, x in enumerate(self.parents) if x < 0]
 
    def group_count(self):
        return len(self.roots())
    
    def all_group_members(self):
        return {r: self.members(r) for r in self.roots()}
    
    def __str__(self):
        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    s = [next(tokens) for _ in range(2)]  # type: "List[str]"
    print(solve(N, s))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
