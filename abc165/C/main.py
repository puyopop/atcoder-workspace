#!/usr/bin/env python3
import sys

def f(a, b, c, d):
    '''
    >>> f([1, 2, 1], [3, 4, 3], [1, 3, 1], [10, 1, 1])
    [[1, 3, 1, 11], [2, 4, 3, 1]]
    '''
    queries = sorted(map(list, zip(a, b, c, d)))
    query = queries[0]
    ret = []
    for q in queries[1:]:
        if query[:3] != q[:3]:
            ret.append(query)
            query = q
            continue
        query[3] += q[3]
    else:
        ret.append(query)
    return ret

def solve(N: int, M: int, Q: int, a: "List[int]", b: "List[int]", c: "List[int]", d: "List[int]"):
    dp = [[[0] * (1 << N) for _ in range(N)] for _ in range(M*2)]
    pass


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    a = [int()] * (Q)  # type: "List[int]"
    b = [int()] * (Q)  # type: "List[int]"
    c = [int()] * (Q)  # type: "List[int]"
    d = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
        c[i] = int(next(tokens))
        d[i] = int(next(tokens))
    print(solve(N, M, Q, a, b, c, d))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    test()
    main()
