#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]", Q: int, B: "List[int]", C: "List[int]"):
    from collections import defaultdict
    X = defaultdict(int)
    for a in A:
        X[a] += 1
    ret = sum(A)
    for b, c in zip(B, C):
        ret -= b * X[b]
        ret += c * X[b]
        X[c] += X[b]
        del X[b]
        print(ret)

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = int(next(tokens))  # type: int
    B = [int()] * (Q)  # type: "List[int]"
    C = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
    solve(N, A, Q, B, C)

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
