#!/usr/bin/env python3
import sys
    
def f():
    N = '''
    .### ..#. .### .### .#.# .### .### .### .### .###
    .#.# .##. ...# ...# .#.# .#.. .#.. ...# .#.# .#.#
    .#.# ..#. .### .### .### .### .### ...# .### .###
    .#.# ..#. .#.. ...# ...# ...# .#.# ...# .#.# ...#
    .### .### .### .### ...# .### .### ...# .### .###
    '''
    NN = tuple(map(lambda s: s.split(), N.strip().split('\n')))
    D = {}
    for i, n in enumerate(zip(*NN)):
        D[tuple(n)] = i
    return D

def parse(N, s):
    nums = [[] for _ in range(N)]
    for ss in s:
        for i, j in enumerate(range(0,4*N, 4)):
            nums[i].append(ss[j:j+4])
    return tuple(map(lambda x: tuple(x), nums))

def solve(N: int, s: "List[str]"):
    D = f()
    return ''.join([str(D[n]) for n in parse(N, s)])


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    s = [next(tokens) for _ in range(5)]  # type: "List[str]"
    print(solve(N, s))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    test()
    main()
