#!/usr/bin/env python3
import sys

D = ((1, 1), (0, 1), (-1, 1), (1, 0), (-1, 0), (0, -1))

def solve(N: int, X: int, Y: int, x: "List[int]", y: "List[int]"):
    from heapq import heappush, heappop
    wall = set(zip(x, y))
    hq = [(0, 0, 0)]
    visited = set()
    while hq:
        cost, cx, cy = heappop(hq)
        node = cx, cy
        if node in visited:
            continue
        if node == (X, Y):
            return cost
        visited.add(node)
        for dx, dy in D:
            nx, ny = cx + dx, cy + dy
            n = (nx, ny)
            if n in visited:
                continue
            if not(-300 <= nx <= 300 and -300 <= ny <= 300):
                continue
            if n in wall:
                continue
            heappush(hq, (cost+1, nx, ny))
    return -1

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    print(solve(N, X, Y, x, y))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
