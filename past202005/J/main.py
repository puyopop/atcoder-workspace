#!/usr/bin/env python3
import sys


def solve(N: int, M: int, a: "List[int]"):
    from bisect import bisect_left
    from itertools import repeat, chain
    arr = []
    counter = chain(range(1, N+1), repeat(-1))
    for aa in a:
        i = bisect_left(arr, (-aa, float('inf')))
        if len(arr) <= i:
            c = next(counter)
            if c != -1:
                arr.append((-aa, c))
            print(c)
        else:
            _, c = arr[i]
            arr[i] = (-aa, c)
            print(c)

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(M)]  # type: "List[int]"
    solve(N, M, a)

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
