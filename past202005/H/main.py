#!/usr/bin/env python3
import sys


def solve(N: int, L: int, x: "List[int]", T: "List[int]"):
    x = set(x)
    dp = [[float('inf')] * 5 for _ in range(L+1)]
    dp[0][0] = T[2] if 0 in x else 0
    for i in range(L):
        p = T[2] if i+1 in x else 0
        # 走ってる、走ってる
        dp[i+1][0] = dp[i][0] + T[0] + p
        # 走ってる、飛んでる1
        dp[i+1][1] = dp[i][0] + T[0] // 2 + T[1] // 2
        # 飛んでる1、走ってる
        dp[i+1][0] = min(dp[i+1][0], dp[i][1] + T[0] // 2 + T[1] // 2 + p)
        # 走ってる、飛んでる2
        dp[i+1][2] = dp[i][0] + T[0] // 2 + T[1] // 2
        # 飛んでる2、飛んでる3
        dp[i+1][3] = dp[i][2] + T[1]
        # 飛んでる3、飛んでる4
        dp[i+1][4] = dp[i][3] + T[1]
        # 飛んでる4、走ってる
        dp[i+1][0] = min(dp[i+1][0], dp[i][4] + T[0] // 2 + T[1] // 2 + p)
    return min(dp[L])

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    L = int(next(tokens))  # type: int
    x = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    T = [int(next(tokens)) for _ in range(3)]  # type: "List[int]"
    print(solve(N, L, x, T))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
