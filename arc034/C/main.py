#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int

def solve(A: int, B: int):
    from collections import Counter
    from functools import reduce
    from itertools import takewhile
    c = Counter()
    for i in range(B+1, A+1):
        n = i
        for j in takewhile(lambda x: x*x<=i, range(2, i+1)):
            while n > 1 and n % j == 0:
                c[j] += 1
                n //= j
        if n > 1:
            c[n] += 1
    return reduce(lambda a, b: (a*(b+1))%MOD, c.values(), 1)

# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    print(solve(A, B))

if __name__ == '__main__':
    main()
