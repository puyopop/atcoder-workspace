#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int

def g(f):
    '''
    t日目へ遷移可能な最小のh
    >>> g([1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 1])
    [0, 0, 0, 1, 2, 3, 5, 5, 7, 7, 8]
    '''
    from collections import defaultdict
    ret = []
    h = 0
    s = defaultdict(int)
    for t in range(len(f)):
        s[f[t]] += 1
        while h < t and s[f[t]] > 1:
            s[f[h]] -= 1
            h += 1
        ret.append(h)
    return ret

def solve(N: int, M: int, f: "List[int]"):
    gg = g(f)
    # i個目のサプリを飲むまでに有り得る方法の数
    dp = [0] * (N+1)   
    su = [0] * (N+2)
    su[1] = 1
    for i in range(1, N+1):
        # 一日に飲み合わせられる薬、全てからジャンプする
        dp[i] = (su[i] - su[gg[i-1]]) % MOD
        su[i+1] = (dp[i] + su[i]) % MOD
    return dp[-1]

# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    f = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    print(solve(N, M, f))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
