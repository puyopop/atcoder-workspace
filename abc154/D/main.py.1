#!/usr/bin/env python3
import sys


def solve(N: int, K: int, p: "List[int]"):
    def f(pp):
        return pp * (pp + 1) / 2 / pp
    q = tuple(map(f, p))
    ma = su = sum(q[:K])
    for i, (qq, qqq) in enumerate(zip(q, q[K:]), 1):
        su = su - qq + qqq
        ma = max(ma, su)
    return ma


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    p = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    print(solve(N, K, p))

if __name__ == '__main__':
    main()
