#!/usr/bin/env python3
import sys
from functools import reduce

MOD = 1000000007  # type: int


def solve(N: int, K: int, a: "List[int]", b: "List[int]"):
    graph = [[] for _ in range(N)]
    for aa, bb in zip(a, b):
        graph[aa-1].append(bb-1)
        graph[bb-1].append(aa-1)
    vgraph = [[] for _ in range(N)]
    q = [(0, n) for n in graph[0]]
    d = [K] * N
    visited = set([0])
    while q:
        so, si = q.pop(0)
        print(so, si, q)
        d[si] -= 1        
        if si in visited:
            continue
        visited.add(si)
        for ssi in graph[si]:
            if ssi in visited:
                continue
            d[ssi] -= 1
            q.append((si, ssi))
    print(d)
    print(reduce(lambda a, b: a * b, d))

# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [int()] * (N - 1)  # type: "List[int]"
    b = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    print(solve(N, K, a, b))

if __name__ == '__main__':
    main()
