#!/usr/bin/env python3
import sys


def solve(N: int):
    D = len(str(N))
    h = [[0] * 10 for _ in range(D)]
    for d in range(D):
        b = 10 ** d
        for n in range(1, 10):
            h[d][n] = min(b, max(N - b * n + 1, 0))
    t = [1 if n >= N else 0 for n in range(10)]
    for n in range(1, 10):
        t[n] += N // 10 + (1 if N % 10 >= n else 0)
    print(*h, sep='\n')
    print(*t)
    return sum(sum(h[d][n]*t[n] for n in range(1, 10)) for d in range(D))


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    print(solve(N))

if __name__ == '__main__':
    main()
