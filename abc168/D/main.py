#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str


def bfs(N, edges):
    from collections import deque
    par = [None] * (N + 1)
    que = deque([(1, 1)])
    while que:
        p, n = que.popleft()
        if par[n] is not None:
            continue
        par[n] = p
        for nn in edges[n]:
            if par[nn] is not None:
                continue
            que.append((n, nn))
    return par

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    edges = [[] for _ in range(N+1)]
    for a, b in zip(A, B):
        edges[a].append(b)
        edges[b].append(a)
    par= bfs(N, edges)
    return par[2:]


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    print('Yes')
    print(*solve(N, M, A, B), sep='\n')

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
