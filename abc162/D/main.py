#!/usr/bin/env python3
import sys


def solve(N: int, S: str):
    dp = [[0] * (3 * N) for _ in range(3)]
    d = dict(zip('RGB', range(3)))
    dd = dict(zip(range(3), 'RGB'))
    S = [d[s] for s in S]
    for i in range(3):
        for j in range(N-1, -1, -1):
            dp[i][j] = dp[i][j+1] + (1 if S[j] == i else 0)
    #print(*dp, sep='\n')
    def f():
        for i in range(N-2):
            for j in range(i+1, N-1):
                c1, c2 = S[i], S[j]
                if c1 == c2:
                    continue
                c3 = 3 - c1 - c2
                di = j - i
                #print((i, j), dd[c1], dd[c2], dd[c3], j+1, j+di, j+di+1)
                #print(dp[c3][j+1], dp[c3][j+di])
                yield dp[c3][j+1] - dp[c3][j+di]
                yield dp[c3][j+di+1]
    print(sum(f()))


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    solve(N, S)

if __name__ == '__main__':
    main()
