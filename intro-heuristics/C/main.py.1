#!/usr/bin/env python3
import sys
from typing import NamedTuple, List

class Game(NamedTuple):
    c: List[int]
    s: List[List[int]]

def solve(D: int, c: "List[int]", s: "List[List[int]]", t: "List[int]"):
    ans = [0]
    lasts = [0] * 26
    sum_c = sum(c)
    daily_loss = sum_c
    bits = [BIT(D*2) for _ in range(26)]    
    for day, tt in enumerate(t, 1):
        a = s[day-1][tt-1]
        lasts[tt-1] = day
        for i in range(26):
            bits[i].add(day, lasts[i]*c[i])
        a -= daily_loss
        a += sum(b.sum(day)-b.sum(day-1) for b in bits)
        ans.append(ans[-1]+a)
        daily_loss += sum_c
    return ans[1:]

# https://kopricky.github.io/code/For_Python/bit.html
class BIT:
    def __init__(self, node_size):
        self._node = node_size+1
        self.bit = [0]*self._node
 
    def add(self, index, add_val):
        index += 1
        while index < self._node:
            self.bit[index] += add_val
            index += index & -index
 
    def sum(self, index):
        index += 1
        res = 0
        while index > 0:
            res += self.bit[index]
            index -= index & -index
        return res

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    D = int(next(tokens))  # type: int
    c = [int(next(tokens)) for _ in range(26)]  # type: "List[int]"
    s = [[int(next(tokens)) for _ in range(26)] for _ in range(D)]  # type: "List[List[int]]"
    t = [int(next(tokens)) for _ in range(D)]  # type: "List[int]"
    print(*solve(D, c, s, t), sep="\n")

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
