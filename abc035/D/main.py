#!/usr/bin/env python3
import sys
from collections import namedtuple
Edge = namedtuple('Edge', 'to cost')
State = namedtuple('State', 'cost node')

def dijkstra(start, edges):
    from heapq import heappush, heappop
    hq = [start]
    min_costs = {}
    while hq:
        s = heappop(hq)
        if s.node in min_costs:
            continue
        min_costs[s.node] = s.cost
        for n, c in edges[s.node]:
            if n in min_costs:
                continue
            heappush(hq, State(s.cost+c, n))
    return min_costs


def solve(N: int, M: int, T: int, A: "List[int]", a: "List[int]", b: "List[int]", c: "List[int]"):
    from collections import defaultdict
    edges, rev_edges = defaultdict(list), defaultdict(list)
    for aa, bb, cc in zip(a, b, c):
        edges[aa].append(Edge(bb, cc))
        rev_edges[bb].append(Edge(aa, cc))
    c1 = dijkstra(State(0, 1), edges)
    c2 = dijkstra(State(0, 1), rev_edges)
    d1 = {i:c1[i] if i in c1 else float('inf') for i in range(1, N+1)}
    d2 = {i:c2[i] if i in c2 else float('inf') for i in range(1, N+1)}
    e = {i: d1[i]+d2[i] for i in range(1, N+1)} 
    ans = -float('inf')
    for i, a in enumerate(A, 1):
        t = a * (T - e[i])
        ans = max(ans, t)
    return ans

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    a = [int()] * (M)  # type: "List[int]"
    b = [int()] * (M)  # type: "List[int]"
    c = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
        c[i] = int(next(tokens))
    print(solve(N, M, T, A, a, b, c))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
