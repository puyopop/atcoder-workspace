#!/usr/bin/env python3
import sys


def solve_iter(N: int, X: "List[int]"):
    Y = sorted(X)
    m = sum(Y[N//2-1:N//2+1]) / 2
    for x in X:
        if x < m:
            yield Y[N//2]
        else:
            yield Y[N//2-1]


def solve(N: int, X: "List[int]"):
    if N == 2:
        return X[::-1]
    return list(solve_iter(N, X))

# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    print(*solve(N, X), sep='\n')

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
