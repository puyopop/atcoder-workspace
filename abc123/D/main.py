#!/usr/bin/env python3
import sys
import heapq

def solve(X: int, Y: int, Z: int, K: int, A: "List[int]", B: "List[int]", C: "List[int]"):
    def next_state(s):
        def _next_state(i, j, k):
            return -sum([A[i], B[j], C[k]]), (i, j, k)
        _, (i, j, k) = s
        if i+1 < len(A):
            yield _next_state(i+1, j, k)
        if j+1 < len(B):
            yield _next_state(i, j+1, k)
        if k+1 < len(C):
            yield _next_state(i, j, k+1)

    ans = set()
    A = tuple(sorted(A, reverse=True))
    B = tuple(sorted(B, reverse=True))
    C = tuple(sorted(C, reverse=True))
    q = [(-sum([A[0], B[0], C[0]]), (0, 0, 0))]
    ans.add(q[0])
    for _ in range(K):
        s = heapq.heappop(q)
        for ns in next_state(s):
            if ns in ans:
                continue
            ans.add(ns)
            heapq.heappush(q, ns)
    return sorted((-v for v, _ in ans), reverse=True)[:K]


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    Z = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(X)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(Y)]  # type: "List[int]"
    C = [int(next(tokens)) for _ in range(Z)]  # type: "List[int]"
    print(*solve(X, Y, Z, K, A, B, C), sep='\n')

if __name__ == '__main__':
    main()
