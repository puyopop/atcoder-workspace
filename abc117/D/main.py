#!/usr/bin/env python3
import sys

def _solve(i, k, bits, N):
    print('i={}, k={}, bits={}, N={}'.format(i, k, bits, N))
    if i == -1:
        return 0
    m = 1 << i
    if bits[i] <= N // 2 and k >= m:
        print('hit')
        return _solve(i-1, k-m, bits, N) + m
    return _solve(i-1, k, bits, N)

def solve(N: int, K: int, A: "List[int]"):
    L = 3
    bits = tuple(sum(a & (1 << i) > 0 for a in A) for i in range(L))
    x = _solve(L-1, K, bits, N) 
    return sum(x ^ a for a in A)

# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    print(solve(N, K, A))

if __name__ == '__main__':
    main()
