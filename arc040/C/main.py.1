#!/usr/bin/env python3
import sys


def solve(N: int, S: "List[str]"):
    S.append("o" * N) # 番兵
    L = list(map(lambda x: x.find("."), S))
    R = list(map(lambda x: x.rfind("."), S))
    i, ret = 0, 0
    while i < N:
        if L[i] == -1 or L[i] > R[i]:
            i += 1
            continue
        R[i+1] = S[i+1].rfind(".", 0, R[i])
        i += 1
        ret += 1
    return ret

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    print(solve(N, S))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
