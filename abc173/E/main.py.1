#!/usr/bin/env python3
import sys
from functools import lru_cache

MOD = 1000000007  # type: int

def solve(N: int, K: int, A: "List[int]"):
    A = sorted(A, key=abs, reverse=True)
    
    def f(k, i):    
        if k == 0:
            return 1
        if i == N:
            return -float("inf")
        if A[i] < 0:
            return max(f(k, i+1), g(k-1, i+1) * A[i])
        return f(k-1, i+1) * A[i]

    def g(k, i):
        if k == 0:
            return 1
        if i == N:
            return float("inf")
        if A[i] < 0:
            return f(k-1, i+1) * A[i]
        return g(k-1, i+1) * A[i]
    print(f(K, 0))

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    print(solve(N, K, A))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
