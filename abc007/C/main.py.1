#!/usr/bin/env python3

def solve(R, C, s, g, c):
    min_costs = {}
    s = (s[0]-1, s[1]-1)
    g = (g[0]-1, g[1]-1)
    def iddfs(x, y, d, ld):
        if d == ld:
            return 
        p = (x, y)
        if p == g:
            return d
        if min_costs.get(p, float("inf")) < d:
            return 
        min_costs[p] = d
        for dx, dy in zip((1, 0, -1, 0), (0, 1, 0, -1)):
            nx, ny = x + dx, y + dy
            if c[nx][ny] == "#":
                continue
            v = iddfs(nx, ny, d+1, ld)
            if v:
                return v
    for ld in range(R*C):
        v = iddfs(s[0], s[1], 0, ld)
        print(ld)
        if v:
            return v
            

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    R, C = map(int, input().split())
    s = tuple(map(int, input().split()))
    g = tuple(map(int, input().split()))
    c = tuple(input() for _ in range(R))
    print(solve(R, C, s, g, c))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
