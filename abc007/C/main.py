#!/usr/bin/env python3

def solve(R, C, s, g, c):
    from heapq import heappush, heappop
    min_costs = {}
    s = (s[0]-1, s[1]-1)
    g = (g[0]-1, g[1]-1)
    
    def h(x, y):
        return abs(g[0]-x) + abs(g[1]-y)

    q = [(h(*s), 0, s)]
    visited = set()
    while q:
        e, co, p = heappop(q)
        if p == g:
            return co
        if p in visited:
            continue
        visited.add(p)
        for dx, dy in zip((1, 0, -1, 0), (0, 1, 0, -1)):
            np = nx, ny = p[0]+dx, p[1]+dy
            if c[nx][ny] == "#" or np in visited:
                continue
            heappush(q, (co+1+h(nx,ny), co+1, np))
    raise

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    R, C = map(int, input().split())
    s = tuple(map(int, input().split()))
    g = tuple(map(int, input().split()))
    c = tuple(input() for _ in range(R))
    print(solve(R, C, s, g, c))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
