#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10**4)

def D(S, i): # 4または9を使ったし、繰り下がれる
    '''
    >>> D("900", 1)
    100
    >>> D("900", 2)
    10
    >>> D("900", 3)
    1
    '''
    return 10 ** (len(S) - i)

def C(S, i): # 4も9も使ってないが、繰り下がれる
    '''
    >>> C("900", 2)
    2
    >>> C("900", 1)
    36
    '''
    if len(S) == i:
        return 0
    return 2 * D(S, i+1) + 8 * C(S, i+1)

def B(S, i): # 4または9を使ったが、繰り下がれない
    '''
    >>> B("900", 3)
    1
    >>> B("901", 2)
    2
    >>> B("902", 2)
    3
    >>> B("900", 1)
    1
    >>> B("910", 1)
    11
    '''
    if len(S) == i:
        return 1
    n = int(S[i])
    if n == 0:
        # 0を選ぶより他にない
        return B(S, i+1)
    return B(S, i+1) + n * D(S, i+1)

def A(S, i): # 4も9も使ってないし、繰り下がれない
    if len(S) == i:
        return 0
    n = int(S[i])
    if n == 0:
        # 0を選ぶより他にない        
        return A(S, i+1)
    if n < 4:
        return A(S, i+1) + n * C(S, i+1)
    if n == 4:
        return B(S, i+1) + n * C(S, i+1)
    if 4 < n < 9:
        return D(S, i+1) + (n - 1) * C(S, i+1) + A(S, i+1)
    if n == 9:
        return D(S, i+1) + (n - 1) * C(S, i+1) + B(S, i+1)
    raise

def solve(a: int, b: int):
    return A(str(b), 0) - A(str(a-1), 0)

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    print(solve(A, B))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    test()
    main()
