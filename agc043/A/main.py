#!/usr/bin/env python3
import sys
from collections import namedtuple, defaultdict
from heapq import heappush, heappop
State = namedtuple('State', 'cost node')
Edge = namedtuple('Edge', 'to cost')

def dijkstra(start, end, edges):
    hq = [start]
    visited = set()
    while hq:
        s = heappop(hq)
        if s.node in visited:
            continue
        if s.node == end:
            return s.cost
        visited.add(s.node)
        for n, c in edges[s.node]:
            if n in visited:
                continue
            heappush(hq, State(s.cost+c, n))
    return -1

def solve(H: int, W: int, s: "List[str]"):
    edges = defaultdict(list)
    s = [ss+"#" for ss in s] + ["#"*W]
    for h in range(H):
        for w in range(W):
            edges[(h, w)].append(Edge((h, w+1), 1 if s[h][w+1] == "#" else 0))
            edges[(h, w)].append(Edge((h+1, w), 1 if s[h+1][w] == "#" else 0))
    return dijkstra(State(1 if s[0][0] == "#" else 0, (0, 0)), (H-1, W-1), edges)

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    s = [next(tokens) for _ in range(W)]  # type: "List[str]"
    print(solve(H, W, s))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
