#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(A: "List[List[int]]", N: int, b: "List[int]"):
    from itertools import product
    BINGO = [[(i, j) for j in range(3)] for i in range(3)] + \
            [[(j, i) for j in range(3)] for i in range(3)] + \
            [[(0, 0), (1, 1), (2, 2)], [(0, 2), (1, 1), (2, 0)]]
    C = {A[i][j]:(i, j) for i, j in product(range(3), repeat=2)}
    D = tuple(map(lambda x: C.get(x, None), b))
    for B in BINGO:
        if all(p in D for p in B):
            return True
    return False


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = [[int(next(tokens)) for _ in range(3)] for _ in range(3)]  # type: "List[List[int]]"
    N = int(next(tokens))  # type: int
    b = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    print(YES if solve(A, N, b) else NO)

if __name__ == '__main__':
    main()
