#!/usr/bin/env python3
import sys


def solve(N: int, M: int, s: "List[int]", c: "List[int]"):
    def f(n):
        n = str(n)
        for ss, cc in zip(s, map(str, c)):
            if n[ss-1] != cc:
                return False
        return True
    if any(map(lambda ss: ss > N, s)):
        return -1
    if N == 1:
        return min(filter(f, range(10)), default=-1)
    return min(filter(f, range(10**(N-1), 10**N)), default=-1)


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    s = [int()] * (M)  # type: "List[int]"
    c = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        s[i] = int(next(tokens))
        c[i] = int(next(tokens))
    print(solve(N, M, s, c))

if __name__ == '__main__':
    main()
