#!/usr/bin/env python3
import sys


def solve(N: int, Q: int, S: str, l: "List[int]", r: "List[int]"):
    table = [0] * (N + 1)
    for i, (s1, s2) in enumerate(zip(S, S[1:]), 1):
        table[i+1] = table[i] + (1 if s1 == 'A' and s2 == 'C' else 0)
    for ll, rr in zip(l, r):
        yield table[rr] - table[ll]

# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    l = [int()] * (Q)  # type: "List[int]"
    r = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        l[i] = int(next(tokens))
        r[i] = int(next(tokens))
    for r in solve(N, Q, S, l, r):
        print(r)

if __name__ == '__main__':
    main()
