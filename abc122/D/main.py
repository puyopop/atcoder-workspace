#!/usr/bin/env python3
import sys
from itertools import product, permutations

MOD = 1000000007  # type: int

def solve(N: int):
    f = lambda : {c:{cc:{ccc:0 for ccc in 'ACGT'} for cc in 'ACGT'} for c in 'ACGT'}
    dp = [f() for _ in range(N+2)]
    ng = set(map(tuple, ('AGC', 'ACG', 'GAC', #.XXX, XXX.
                         'AAGC', 'AGGC', 'ACGC', 'ATGC', #A.GC
                         'AGAC', 'AGCC', 'AGGC', 'AGTC', #AG.C
                     )))
    for a, b, c in product('ACGT', repeat=3):
        if (a, b, c) in ng:
                continue
        dp[2][a][b][c] = (dp[2][a][b][c] + 1) % MOD
    for i in range(2, N):
        for a, b, c, d in product('ACGT', repeat=4):
            if (a, b, c, d) in ng or (a, b, c) in ng or (b, c, d) in ng:
                continue
            dp[i][b][c][d] = (dp[i][b][c][d] + dp[i-1][a][b][c]) % MOD
    return sum(sum(sum(dd.values()) for dd in d.values()) for d in dp[N-1].values()) % MOD

# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    print(solve(N))

if __name__ == '__main__':
    main()
