#!/usr/bin/env python3
import sys
sys.setrecursionlimit(200_000)

def solve(N: int, u: "List[int]", v: "List[int]", w: "List[int]"):
    from collections import namedtuple
    Edge = namedtuple("Edge", "to cost")
    edges = [[] for _ in range(N)]
    for uu, vv, ww in zip(u, v, w):
        edges[uu-1].append(Edge(vv-1, ww))
        edges[vv-1].append(Edge(uu-1, ww))
    colors = [None] * N
    def dfs(n, c):
        if colors[n] is not None:
            return
        colors[n] = c
        for nn, w in edges[n]:
            dfs(nn, (c+w)%2)
    dfs(0, 0)
    return colors


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    u = [int()] * (N - 1)  # type: "List[int]"
    v = [int()] * (N - 1)  # type: "List[int]"
    w = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        u[i] = int(next(tokens))
        v[i] = int(next(tokens))
        w[i] = int(next(tokens))
    print(*solve(N, u, v, w), sep="\n")

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
