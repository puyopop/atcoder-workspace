#!/usr/bin/env python3
import sys
from itertools import permutations

def solve(N: int, x: "List[int]", y: "List[int]"):
    def d(xy1_xy2):
        xy1, xy2 = xy1_xy2
        return ((xy1[0] - xy2[0]) ** 2 + (xy1[1] - xy2[1]) ** 2) ** 0.5

    acc = [sum(map(d, zip(perm, perm[1:]))) for perm in map(tuple, permutations(zip(x, y)))]
    return sum(acc) / len(acc)

# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    print(solve(N, x, y))

if __name__ == '__main__':
    main()
